/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Transacation } from "./Transacation";
import { TransacationCountArgs } from "./TransacationCountArgs";
import { TransacationFindManyArgs } from "./TransacationFindManyArgs";
import { TransacationFindUniqueArgs } from "./TransacationFindUniqueArgs";
import { CreateTransacationArgs } from "./CreateTransacationArgs";
import { UpdateTransacationArgs } from "./UpdateTransacationArgs";
import { DeleteTransacationArgs } from "./DeleteTransacationArgs";
import { Customer } from "../../customer/base/Customer";
import { TransacationService } from "../transacation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Transacation)
export class TransacationResolverBase {
  constructor(
    protected readonly service: TransacationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Transacation",
    action: "read",
    possession: "any",
  })
  async _transacationsMeta(
    @graphql.Args() args: TransacationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Transacation])
  @nestAccessControl.UseRoles({
    resource: "Transacation",
    action: "read",
    possession: "any",
  })
  async transacations(
    @graphql.Args() args: TransacationFindManyArgs
  ): Promise<Transacation[]> {
    return this.service.transacations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Transacation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Transacation",
    action: "read",
    possession: "own",
  })
  async transacation(
    @graphql.Args() args: TransacationFindUniqueArgs
  ): Promise<Transacation | null> {
    const result = await this.service.transacation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Transacation)
  @nestAccessControl.UseRoles({
    resource: "Transacation",
    action: "create",
    possession: "any",
  })
  async createTransacation(
    @graphql.Args() args: CreateTransacationArgs
  ): Promise<Transacation> {
    return await this.service.createTransacation({
      ...args,
      data: {
        ...args.data,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Transacation)
  @nestAccessControl.UseRoles({
    resource: "Transacation",
    action: "update",
    possession: "any",
  })
  async updateTransacation(
    @graphql.Args() args: UpdateTransacationArgs
  ): Promise<Transacation | null> {
    try {
      return await this.service.updateTransacation({
        ...args,
        data: {
          ...args.data,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Transacation)
  @nestAccessControl.UseRoles({
    resource: "Transacation",
    action: "delete",
    possession: "any",
  })
  async deleteTransacation(
    @graphql.Args() args: DeleteTransacationArgs
  ): Promise<Transacation | null> {
    try {
      return await this.service.deleteTransacation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customer",
  })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async getCustomer(
    @graphql.Parent() parent: Transacation
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
