/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Transacation as PrismaTransacation,
  Customer as PrismaCustomer,
} from "@prisma/client";

export class TransacationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TransacationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.transacation.count(args);
  }

  async transacations<T extends Prisma.TransacationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransacationFindManyArgs>
  ): Promise<PrismaTransacation[]> {
    return this.prisma.transacation.findMany<Prisma.TransacationFindManyArgs>(
      args
    );
  }
  async transacation<T extends Prisma.TransacationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransacationFindUniqueArgs>
  ): Promise<PrismaTransacation | null> {
    return this.prisma.transacation.findUnique(args);
  }
  async createTransacation<T extends Prisma.TransacationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransacationCreateArgs>
  ): Promise<PrismaTransacation> {
    return this.prisma.transacation.create<T>(args);
  }
  async updateTransacation<T extends Prisma.TransacationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransacationUpdateArgs>
  ): Promise<PrismaTransacation> {
    return this.prisma.transacation.update<T>(args);
  }
  async deleteTransacation<T extends Prisma.TransacationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransacationDeleteArgs>
  ): Promise<PrismaTransacation> {
    return this.prisma.transacation.delete(args);
  }

  async getCustomer(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.transacation
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }
}
